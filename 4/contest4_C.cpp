/*
Команда R вновь стремится выкрасть Пикачу! Для их коварного плана они придумали устройство, способное генерировать
исключительно правдоподобные голограммы покемонов. После этого Джесси и Джеймс сделали множество голограмм покемонов, 
но с малыми видоизменениями в силу погрешности проектора.
У Хэша, владельца Пикачу, есть специальное устройство, которое по наведению на покемона умеет выдавать основную информацию
о нем, — покидекс. В силу особенности данного прибора, голограммы называются словами, похожими на оригинальные виды.
Слова называют похожими, если из одного слова можно получить другое, заменив в нём одинаковые буквы на одинаковые, 
а разные — на разные. Например, слова «aba» и «bcb» похожие, а «abb» и «aaa» — нет.
В ходе битвы с командой R Хэшу придется активно пользоваться покидексом, чтобы понимать, где реальные цели, а где
их копии. Вам предстоит написать часть покидекса, отвечающую за запоминание встреченных в ходе битвы покемонов.
Всего будет q запросов. Запрос на добавление слова si означает, что Хэш хочет добавить этого покемона в память покидекса.
Запрос на проверку покемона с именем si означает, что Хэш хочет узнать, есть ли в его сканере покемонов,
чье название похоже на si. В частности он поймет, что перед ним голограмма, если такой уже есть в памяти.
Напишите программу, выполняющую все запросы Хэша.
  Формат ввода
В первой строке содержится число q (1≤q≤10^5) — количество запросов. В следующих q строках содержатся сами запросы. 
Запрос на добавление в начале содержит символ «+», а запрос на проверку в начале содержит символ «?». Затем 
идёт само слово, которое необходимо добавить в покидекс или проверить, содержатся ли в памяти покидекса похожие 
на него слова.Обозначим через L суммарную длину слов в запросах. Гарантируется, что L не превосходит 10^6.

  Формат вывода
На каждый запрос проверки выведите в отдельной строке «YES» (без кавычек), если похожее слово есть в словаре, и «NO»
(без кавычек) в противном случае.
  Пример
Ввод	
5
? cdc
+ aaa
? cdc
+ aba
? cdc
Вывод
NO
NO
YES
*/

#include <iostream>
#include <string>
#include <unordered_map>
#include <unordered_set>

std::string leters = "abcdefghijklmnopqrstuvwxyz";

void Change(std::string& str) {
  std::unordered_map<char, char> arr;
  long long p = 0;
  for (size_t i = 0; i < str.size(); i++) {
    if (arr.find(str[i]) == arr.end()) {
      arr[str[i]] = leters[p];
      p++;
    }
  }
  for (size_t i = 0; i < str.size(); i++) {
    str[i] = arr[str[i]];
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  long long n;
  std::cin >> n;
  std::unordered_set<std::string> arr;
  for (long long i = 0; i < n; i++) {
    char c;
    std::string x;
    std::cin >> c >> x;
    Change(x);
    if (c == '+') {
      arr.insert(x);
    } else {
      std::cout << (arr.find(x) != arr.end() ? "YES" : "NO") << '\n';
    }
  }
  return 0;
}
